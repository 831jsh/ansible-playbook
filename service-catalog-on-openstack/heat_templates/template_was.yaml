heat_template_version: 2014-10-16

description: >
  SDS Heat Orchestration Template (WAS)

parameters:
  define_WAS_instance_name:
    type: string
    description: Instance Name

  define_key_name:
    type: string
    description: Name of an existing key pair to use for the instance

  define_flavor:
    type: string
    description: Flavor for the instance to be created

  define_metadata:
    type: json

  define_image:
    type: string
    description: Glance image for instance

  define_pool_id:
    type: string
    description: LBaaS Pool

  define_DB_lb_floating:
    type: string
    description: LBaaS Floating IP

  define_tenant_network:
    type: string
    description: Tenant VM Network

  define_tenant_network_subnet:
    type: string
    description: Tenant VM Network Subnet

  define_public_network:
    type: string
    description: External VM Network

  define_router:
    type: string
    description: The L3 Router

  define_WAS_cinder_vol_size_data:
    type: number
    description: The size of the volume for Data

  define_security_group:
    type: string
    description: Security Group

  define_DB_sid:
    type: string
    description: DB SID

  define_DB_server_port:
    type: number
    description: DB Ports

resources:
  random_hostname_suffix:
    type: OS::Heat::RandomString
    properties:
      character_classes: [{"class": lowercase}, {"class": digits}]
      length: 4

  cinder_volume_data:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: define_WAS_cinder_vol_size_data }
      name:
        str_replace:
          template: "HOSTNM-SUFFIX"
          params:
            HOSTNM: {get_param: define_WAS_instance_name}
            SUFFIX: {get_attr: [random_hostname_suffix, value]}

  cinder_volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: cinder_volume_data}
      instance_uuid: { get_resource: WAS }
      mountpoint: /dev/vdb

  WAS:
    type: OS::Nova::Server
    depends_on: cinder_volume_data
    properties:
      name:
        str_replace:
          template: "HOSTNM-SUFFIX"
          params:
            HOSTNM: {get_param: define_WAS_instance_name}
            SUFFIX: {get_attr: [random_hostname_suffix, value]}
      key_name: { get_param: define_key_name }
      flavor: { get_param: define_flavor }
      image: { get_param: define_image }
      networks:
        - port: { get_resource: resource_tenant_network_port }
      security_groups:
        - { get_param: define_security_group }
      metadata: { get_param: define_metadata }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            sleep 3
            echo "wasname : $wasname" >> /tmp/cloud_history.txt
            echo "wasvolsize : $wasvolsize" >> /tmp/cloud_history.txt
            echo "dblb : $dblb" >> /tmp/cloud_history.txt
            echo "dbsid : $dbsid" >> /tmp/cloud_history.txt
            echo "dbport : $dbport" >> /tmp/cloud_history.txt
            curl -f -k -H 'Content-Type: application/json' -XPOST -d '{"extra_vars": {"wasname":"$wasname", "wasvolsize":$wasvolsize, "dblb":"$dblb", "dbsid":"$dbsid", "dbport":$dbport}}' --connect-timeout 600 --user admin:'redhat' https://10.10.10.10:443/api/v1/job_templates/102/launch/
          params:
            $wasname:
              str_replace:
                template: "HOSTNM-SUFFIX"
                params:
                  HOSTNM: {get_param: define_WAS_instance_name}
                  SUFFIX: {get_attr: [random_hostname_suffix, value]}
            $wasvolsize: { get_param: define_WAS_cinder_vol_size_data }
            $dblb: { get_param: define_DB_lb_floating }
            $dbsid: { get_param: define_DB_sid }
            $dbport: { get_param: define_DB_server_port }

  resource_tenant_network_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: define_tenant_network }
      fixed_ips:
        - subnet_id: { get_param: define_tenant_network_subnet }

  resource_floating_ip_address:
    type: OS::Neutron::FloatingIP
    depends_on: resource_tenant_network_port
    properties:
      floating_network: public

  resource_floating_ip_address_association:
    type: OS::Neutron::FloatingIPAssociation
    depends_on: resource_floating_ip_address
    properties:
      floatingip_id: { get_resource: resource_floating_ip_address }
      port_id: { get_resource: resource_tenant_network_port }

  WAS_LB:
    type: OS::Neutron::PoolMember
    depends_on: WAS
    properties:
      pool_id: { get_param: define_pool_id }
      address: { get_attr: [WAS, first_address] }
      protocol_port: 8009

outputs:
  server_private_ip:
    value: {get_attr: [WAS, first_address]}
