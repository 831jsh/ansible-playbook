heat_template_version: 2014-10-16

description: >
  SDS Heat Orchestration Template (Main)

parameters:
  define_HTTPD_instance_name:
    type: string
    description: 기본 인스턴스 이름 지정

  define_WAS_instance_name:
    type: string
    description: 기본 인스턴스 이름 지정

  define_DB_instance_name:
    type: string
    description: 기본 인스턴스 이름 지정
    
  define_key_name:
    type: string
    description: 사용할 키페어 이름 지정 (필요시 변경)
        
  define_flavor:
    type: string
    description: 사용 할 Flavor 종류 지정 (필요시 변경)
        
  define_image:
    type: string
    description: 인스턴스의 Glance Image UUID 입력 (필요시 변경)

  define_security_group:
    type: string
    description: 인스턴스의 Security Group

  define_HTTPD_min_size:
    type: number
    description: Min Size

  define_HTTPD_max_size:
    type: number
    description: Max Size

  define_WAS_min_size:
    type: number
    description: Min Size

  define_WAS_max_size:
    type: number
    description: Max Size

  define_DB_min_size:
    type: number
    description: Min Size

  define_DB_max_size:
    type: number
    description: Max Size

  define_public_network:
    type: string
    description: 외부 (External) 네트워크의 Neutron net UUID (필요시 변경)
    default: b5e6cda7-f49a-466b-9816-698bee3f90b1

  make_tenant_network:
    type: string
    description: 생성 될 Tenant VM Network 의 이름 (Stack 생성시 사용자 Argument 로 입력받음.) (필요시 변경)

  make_tenant_network_cidr:
    type: string
    description: 생성 될 Tenant VM Network 의 CIDR (필요시 변경)
    default: 10.0.0.0/24

  make_tenant_network_gateway:
    type: string
    description: 생성 될 Tenant VM Network 의 Gateway (필요시 변경)
    default: 10.0.0.1

  make_tenant_network_pool_start:
    type: string
    description: 생성 될 Tenant VM Network 의 Pool Range 시작 주소. (DHCP 시작) (필요시 변경)
    default: 10.0.0.10

  make_tenant_network_pool_end:
    type: string
    description: 생성 될 Tenant VM Network 의 Pool Range 마지막 주소. (DHCP 끝) (필요시 변경)
    default: 10.0.0.100

  make_tenant_network_dhcp_use:
    type: string
    description: 생성 될 Tenant VM Network 의 DHCP 사용여부.
    default: True

  define_cinder_vol_size_os:
    type: number
    description: Cinder Block Device 사이즈 (Cinder Booting 시에만 사용)
    default: 5
    constraints:
      - range: { min: 5, max: 100 }

  define_HTTPD_cinder_vol_size_data:
    type: number
    description: Cinder Block Device 사이즈 (/dev/vdb Ephermal Disk 사이즈) (필요시 변경)

  define_WAS_cinder_vol_size_data:
    type: number
    description: Cinder Block Device 사이즈 (/dev/vdb Ephermal Disk 사이즈) (필요시 변경)

  define_DB_cinder_vol_size_data:
    type: number
    description: Cinder Block Device 사이즈 (/dev/vdb Ephermal Disk 사이즈) (필요시 변경)

  define_DB_sid:
    type: string
    description: 사용자정의 DB SID

  define_DB_server_port:
    type: number
    description: 사용자정의 DB Application Port

resources:
  resource_tenant_network:
    type: OS::Neutron::Net
    properties:
      admin_state_up: true
      name: { get_param: make_tenant_network }

  resource_tenant_network_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: resource_tenant_network }
      cidr: { get_param: make_tenant_network_cidr }
      gateway_ip: { get_param: make_tenant_network_gateway }
      enable_dhcp: { get_param: make_tenant_network_dhcp_use }
      allocation_pools:
        - start: { get_param: make_tenant_network_pool_start }
          end: { get_param: make_tenant_network_pool_end }

  resource_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: define_public_network }

  resource_router_interface:
    type: OS::Neutron::RouterInterface
    depends_on: resource_router
    properties:
      router_id: { get_resource: resource_router }
      subnet_id: { get_resource: resource_tenant_network_subnet }

  resource_HTTPD_lb:
    type: OS::Neutron::LoadBalancer
    properties:
      protocol_port: 80
      pool_id: { get_resource: resource_HTTPD_lb_pool }

  resource_HTTPD_lb_pool:
    type: OS::Neutron::Pool
    properties:
      protocol: HTTP
      monitors: [{ get_resource: resource_HTTPD_lb_monitor }]
      subnet_id: { get_resource: resource_tenant_network_subnet }
      lb_method: ROUND_ROBIN
      vip:
        protocol_port: 80

  resource_HTTPD_lb_monitor:
    type: OS::Neutron::HealthMonitor
    properties:
      type: TCP
      delay: 5
      max_retries: 5
      timeout: 5

#  resource_HTTPD_lb_floating:
#    type: OS::Neutron::FloatingIP
#    depends_on: resource_router_interface
#    properties:
#      fixed_ip_address: { get_attr: [resource_HTTPD_lb_pool, vip, address] }
#      # floating_network_id: { get_param: define_public_network }
#      floating_network: public

  resource_HTTPD_lb_floating:
    type: OS::Neutron::FloatingIP
    depends_on: resource_router_interface
    properties:
      floating_network: public

  resource_HTTPD_lb_floating_association:
    type: OS::Neutron::FloatingIPAssociation
    depends_on: resource_HTTPD_lb_floating
    properties:
      floatingip_id: { get_resource: resource_HTTPD_lb_floating }
      port_id: { get_attr: [resource_HTTPD_lb_pool, vip, port_id] }

  resource_WAS_lb:
    type: OS::Neutron::LoadBalancer
    properties:
      protocol_port: 8009
      pool_id: { get_resource: resource_WAS_lb_pool }

  resource_WAS_lb_pool:
    type: OS::Neutron::Pool
    properties:
      protocol: TCP
      monitors: [{ get_resource: resource_WAS_lb_monitor }]
      subnet_id: { get_resource: resource_tenant_network_subnet }
      lb_method: ROUND_ROBIN
      vip:
        protocol_port: 8009

  resource_WAS_lb_monitor:
    type: OS::Neutron::HealthMonitor
    properties:
      type: TCP
      delay: 5
      max_retries: 5
      timeout: 5

#  resource_WAS_lb_floating:
#    type: OS::Neutron::FloatingIP
#    depends_on: resource_router_interface
#    properties:
#      fixed_ip_address: { get_attr: [resource_WAS_lb_pool, vip, address] }
#      # floating_network_id: { get_param: define_public_network }
#      floating_network: public
#      port_id: { get_attr: [resource_WAS_lb_pool, vip, port_id] }

  resource_WAS_lb_floating:
    type: OS::Neutron::FloatingIP
    depends_on: resource_router_interface
    properties:
      floating_network: public

  resource_WAS_lb_floating_association:
    type: OS::Neutron::FloatingIPAssociation
    depends_on: resource_WAS_lb_floating
    properties:
      floatingip_id: { get_resource: resource_WAS_lb_floating }
      port_id: { get_attr: [resource_WAS_lb_pool, vip, port_id] }

  resource_DB_lb:
    type: OS::Neutron::LoadBalancer
    properties:
      protocol_port: { get_param: define_DB_server_port }
      pool_id: { get_resource: resource_DB_lb_pool }

  resource_DB_lb_pool:
    type: OS::Neutron::Pool
    properties:
      protocol: TCP
      monitors: [{ get_resource: resource_DB_lb_monitor }]
      subnet_id: { get_resource: resource_tenant_network_subnet }
      lb_method: ROUND_ROBIN
      vip:
        protocol_port: { get_param: define_DB_server_port }

  resource_DB_lb_monitor:
    type: OS::Neutron::HealthMonitor
    properties:
      type: TCP
      delay: 5
      max_retries: 5
      timeout: 5

#  resource_DB_lb_floating:
#    type: OS::Neutron::FloatingIP
#    depends_on: resource_router_interface
#    properties:
#      fixed_ip_address: { get_attr: [resource_DB_lb_pool, vip, address] }
#      # floating_network_id: { get_param: define_public_network }
#      floating_network: public
#      port_id: { get_attr: [resource_DB_lb_pool, vip, port_id] }

  resource_DB_lb_floating:
    type: OS::Neutron::FloatingIP
    depends_on: resource_router_interface
    properties:
      floating_network: public

  resource_DB_lb_floating_association:
    type: OS::Neutron::FloatingIPAssociation
    depends_on: resource_DB_lb_floating
    properties:
      floatingip_id: { get_resource: resource_DB_lb_floating }
      port_id: { get_attr: [resource_DB_lb_pool, vip, port_id] }

# ----------------------------------------------------------------------------- #
#  HTTPD_Security_Group:
#    type: OS::Neutron::SecurityGroup
#    properties:
#      description: Ping, SSH, and HTTP(s)
#      rules:
#      - protocol: icmp
#      - protocol: tcp
#        port_range_min: 22
#        port_range_max: 22
#      - protocol: tcp
#        port_range_min: 80
#        port_range_max: 80
#      - protocol: tcp
#        port_range_min: 443
#        port_range_max: 443

  HTTPD:
    type: OS::Heat::AutoScalingGroup
    depends_on: resource_router_interface
    properties:
      resource:
        type: template_httpd.yaml
        properties:
          define_HTTPD_instance_name: { get_param: define_HTTPD_instance_name }
          define_key_name: { get_param: define_key_name }
          define_flavor: { get_param: define_flavor }
          define_image: { get_param: define_image }
          define_tenant_network: { get_resource: resource_tenant_network }
          define_tenant_network_subnet: { get_resource: resource_tenant_network_subnet }
          define_public_network: { get_param: define_public_network }
          define_pool_id: { get_resource: resource_HTTPD_lb_pool }
          define_HTTPD_cinder_vol_size_data: { get_param: define_HTTPD_cinder_vol_size_data }
          define_security_group: { get_param: define_security_group }
          define_metadata: {"metering.group": "HTTPD"}
          define_router: { get_resource: resource_router }
          define_WAS_lb_floating: {get_attr: [ resource_WAS_lb_floating, floating_ip_address ]}
      min_size: { get_param: define_HTTPD_min_size }
      max_size: { get_param: define_HTTPD_max_size }
      desired_capacity: { get_param: define_HTTPD_min_size }

  HTTPD_scale_up_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: HTTPD}
      cooldown: 10
      scaling_adjustment: 1

  HTTPD_scale_down_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: HTTPD}
      cooldown: 10
      scaling_adjustment: '-1'
# ----------------------------------------------------------------------------- #

# ----------------------------------------------------------------------------- #
#  WAS_Security_Group:
#    type: OS::Neutron::SecurityGroup
#    properties:
#      description: Ping, SSH, and HTTP(s)
#      rules:
#      - protocol: icmp
#      - protocol: tcp
#        port_range_min: 22
#        port_range_max: 22
#      - protocol: tcp
#        port_range_min: 80
#        port_range_max: 80
#      - protocol: tcp
#        port_range_min: 443
#        port_range_max: 443

  WAS:
    type: OS::Heat::AutoScalingGroup
    depends_on: resource_router_interface
    properties:
      resource:
        type: template_was.yaml
        properties:
          define_WAS_instance_name: { get_param: define_WAS_instance_name }
          define_key_name: { get_param: define_key_name }
          define_flavor: { get_param: define_flavor }
          define_image: { get_param: define_image }
          define_tenant_network: { get_resource: resource_tenant_network }
          define_tenant_network_subnet: { get_resource: resource_tenant_network_subnet }
          define_public_network: { get_param: define_public_network }
          define_pool_id: { get_resource: resource_WAS_lb_pool }
          define_WAS_cinder_vol_size_data: { get_param: define_WAS_cinder_vol_size_data }
          define_security_group: { get_param: define_security_group }
          define_metadata: {"metering.group": "WAS"}
          define_router: { get_resource: resource_router }
          define_DB_lb_floating: {get_attr: [ resource_DB_lb_floating, floating_ip_address ]}
          define_DB_sid: { get_param: define_DB_sid }
          define_DB_server_port: { get_param: define_DB_server_port }
      min_size: { get_param: define_WAS_min_size }
      max_size: { get_param: define_WAS_max_size }
      desired_capacity: { get_param: define_WAS_min_size }

  WAS_scale_up_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: WAS}
      cooldown: 10
      scaling_adjustment: 1

  WAS_scale_down_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: WAS}
      cooldown: 10
      scaling_adjustment: '-1'
# ----------------------------------------------------------------------------- #

# ----------------------------------------------------------------------------- #
#  DB_Security_Group:
#    type: OS::Neutron::SecurityGroup
#    properties:
#      description: Ping, SSH, and HTTP(s)
#      rules:
#      - protocol: icmp
#      - protocol: tcp
#        port_range_min: 22
#        port_range_max: 22
#      - protocol: tcp
#        port_range_min: 80
#        port_range_max: 80
#      - protocol: tcp
#        port_range_min: 443
#        port_range_max: 443
#      - protocol: tcp
#        port_range_min: { get_param: define_DB_server_port }
#        port_range_max: { get_param: define_DB_server_port }

  DB:
    type: OS::Heat::AutoScalingGroup
    depends_on: resource_router_interface
    properties:
      resource:
        type: template_db.yaml
        properties:
          define_DB_instance_name: { get_param: define_DB_instance_name }
          define_key_name: { get_param: define_key_name }
          define_flavor: { get_param: define_flavor }
          define_image: { get_param: define_image }
          define_tenant_network: { get_resource: resource_tenant_network }
          define_tenant_network_subnet: { get_resource: resource_tenant_network_subnet }
          define_public_network: { get_param: define_public_network }
          define_pool_id: { get_resource: resource_DB_lb_pool }
          define_DB_cinder_vol_size_data: { get_param: define_DB_cinder_vol_size_data }
          define_security_group: { get_param: define_security_group }
          define_metadata: {"metering.group": "DB"}
          define_router: { get_resource: resource_router }
          define_DB_sid: { get_param: define_DB_sid }
          define_DB_server_port: { get_param: define_DB_server_port }
      min_size: { get_param: define_DB_min_size }
      max_size: { get_param: define_DB_max_size }
      desired_capacity: { get_param: define_DB_min_size }

  DB_scale_up_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: DB}
      cooldown: 10
      scaling_adjustment: 1

  DB_scale_down_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: DB}
      cooldown: 10
      scaling_adjustment: '-1'
# ----------------------------------------------------------------------------- #

# ----------------------------------------------------------------------------- #
# CPU Ceilometer High Alarm 정의. (period 주기 및 threshold 제한값 변경 필요)
# ----------------------------------------------------------------------------- #
  HTTPD_cpu_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-up if the average CPU > 50% for 60 Second (필요시 변경)
      meter_name: cpu_util
      statistic: avg
      period: 60
      evaluation_periods: 1
      threshold: 50
      alarm_actions:
        - {get_attr: [HTTPD_scale_up_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.group': 'HTTPD'}
      comparison_operator: gt

  WAS_cpu_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-up if the average CPU > 50% for 60 Second (필요시 변경)
      meter_name: cpu_util
      statistic: avg
      period: 60
      evaluation_periods: 1
      threshold: 50
      alarm_actions:
        - {get_attr: [WAS_scale_up_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.group': 'WAS'}
      comparison_operator: gt

  DB_cpu_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-up if the average CPU > 50% for 60 Second (필요시 변경)
      meter_name: cpu_util
      statistic: avg
      period: 60
      evaluation_periods: 1
      threshold: 50
      alarm_actions:
        - {get_attr: [DB_scale_up_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.group': 'DB'}
      comparison_operator: gt
# ----------------------------------------------------------------------------- #

# ----------------------------------------------------------------------------- #
# CPU Ceilometer Low Alarm 정의. (period 주기 및 threshold 제한값 변경 필요)
# ----------------------------------------------------------------------------- #
  HTTPD_cpu_alarm_low:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-down if the average CPU < 20% for 120 Second (필요시 변경)
      meter_name: cpu_util
      statistic: avg
      period: 120
      evaluation_periods: 1
      threshold: 20
      alarm_actions:
        - {get_attr: [HTTPD_scale_down_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.group': 'HTTPD'}
      comparison_operator: lt

  WAS_cpu_alarm_low:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-down if the average CPU < 20% for 120 Second (필요시 변경)
      meter_name: cpu_util
      statistic: avg
      period: 120
      evaluation_periods: 1
      threshold: 20
      alarm_actions:
        - {get_attr: [WAS_scale_down_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.group': 'WAS'}
      comparison_operator: lt

  DB_cpu_alarm_low:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-down if the average CPU < 20% for 120 Second (필요시 변경)
      meter_name: cpu_util
      statistic: avg
      period: 120
      evaluation_periods: 1
      threshold: 20
      alarm_actions:
        - {get_attr: [DB_scale_down_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.group': 'DB'}
      comparison_operator: lt
# ----------------------------------------------------------------------------- #
      
outputs:
  HTTPD_scale_up_url:
    description: This URL is the webhook to scale down the group.
    value: {get_attr: [HTTPD_scale_up_policy, alarm_url]}

  HTTPD_scale_dn_url:
    description: This URL is the webhook to scale down the group.
    value: {get_attr: [HTTPD_scale_down_policy, alarm_url]}

  WAS_scale_up_url:
    description: This URL is the webhook to scale down the group.
    value: {get_attr: [WAS_scale_up_policy, alarm_url]}

  WAS_scale_dn_url:
    description: This URL is the webhook to scale down the group.
    value: {get_attr: [WAS_scale_down_policy, alarm_url]}

  DB_scale_up_url:
    description: This URL is the webhook to scale down the group.
    value: {get_attr: [DB_scale_up_policy, alarm_url]}

  DB_scale_dn_url:
    description: This URL is the webhook to scale down the group.
    value: {get_attr: [DB_scale_down_policy, alarm_url]}

  ceilometer_query_cpu:
    value:
      str_replace:
        template: >
          ceilometer statistics -m cpu_util 
          -q metadata.user_metadata.stack=stackval -p 60 -a avg
        params:
          stackval: { get_param: "OS::stack_id" }
    description: Ceilometer query for statistics on the cpu_util meter
